package faizan.java.basics.graphs;

public class Main {

	public static void main(String[] args) {
		UndirectedUnweightedGraph graph1=new AdjacencyMatrixUndirectedUnweightedGraph(5);
		graph1.addEdge(0, 1);
		graph1.addEdge(0, 2);
		graph1.addEdge(2, 3);		
//		graph1.printGraph();
//		graph1.depthFirstTraverse(0);
//		graph1.depthFirstTraverse();
//		graph1.depthFirstTraverseRecursive(0);
//		graph1.depthFirstTraverseRecursive();
//		graph1.breadthFirstTraverse(3);
//		graph1.breadthFirstTraverse();
//		System.out.println("Graph is cyclic : "+graph1.isCyclic());
		UndirectedUnweightedGraph graph2=new AdjacencyListUndirectedUnweightedGraph(5);
		graph2.addEdge(0, 1);
		graph2.addEdge(0, 2);
		graph2.addEdge(2, 3);	
//		graph2.printGraph();
//		graph2.depthFirstTraverse(0);
//		graph2.depthFirstTraverse();
//		graph2.depthFirstTraverseRecursive(0);
//		graph2.depthFirstTraverseRecursive();
//		graph2.breadthFirstTraverse(3);
//		graph2.breadthFirstTraverse();
//		System.out.println("Graph is cyclic : "+graph2.isCyclic());
		UndirectedUnweightedGraph graph3=new MapUndirectedUnweightedGraph(5);
		graph3.addEdge(0, 1);
		graph3.addEdge(0, 2);
		graph3.addEdge(2, 3);	
//		graph3.printGraph();
//		graph3.depthFirstTraverse(0);
//		graph3.depthFirstTraverse();
//		graph3.depthFirstTraverseRecursive(0);
//		graph3.depthFirstTraverseRecursive();
//		graph3.breadthFirstTraverse(3);
//		graph3.breadthFirstTraverse();
//		System.out.println("Graph is cyclic : "+graph3.isCyclic());
		UndirectedWeightedGraph graph4=new AdjacencyMatrixUndirectedWeightedGraph(4);
		graph4.addEdge(0, 1, 1);
		graph4.addEdge(0, 2, 2);
		graph4.addEdge(2, 3, 3);
//		graph4.printGraph();
//		graph4.getShortestPrathTree(0);
//		System.out.println("Graph is cyclic : "+graph4.isCyclic());
		UndirectedWeightedGraph graph5=new AdjacencyListUndirectedWeightedGraph(4);
		graph5.addEdge(0, 1, 1);
		graph5.addEdge(0, 2, 2);
		graph5.addEdge(2, 3, 3);	
//		graph5.printGraph();
//		graph5.getShortestPrathTree(0);
//		System.out.println("Graph is cyclic : "+graph5.isCyclic());
		UndirectedWeightedGraph graph6=new MapUndirectedWeightedGraph(4);
		graph6.addEdge(0, 1, 1);
		graph6.addEdge(0, 2, 2);
		graph6.addEdge(2, 3, 3);		
//		graph6.printGraph();
//		graph6.getShortestPrathTree(0);
//		System.out.println("Graph is cyclic : "+graph6.isCyclic());
		DirectedUnweightedGraph graph7=new AdjacencyMatrixDirectedUnweightedGraph(6);
		graph7.addEdge(0, 1);
		graph7.addEdge(0, 2);
		graph7.addEdge(1, 2);
		graph7.addEdge(1, 3);
		graph7.addEdge(2, 3);
		graph7.addEdge(2, 4);
//		graph7.printGraph();
//		graph7.depthFirstTraverse(0);
//		graph7.depthFirstTraverse();
//		graph7.depthFirstTraverseRecursive(0);
//		graph7.depthFirstTraverseRecursive();
//		graph7.breadthFirstTraverse(0);
//		graph7.breadthFirstTraverse();
//		graph7.topologicalSort();
//		graph7.topologicalSortRecursive();
		DirectedUnweightedGraph graph8=new AdjacencyListDirectedUnweightedGraph(6);
		graph8.addEdge(0, 1);
		graph8.addEdge(0, 2);
		graph8.addEdge(1, 2);
		graph8.addEdge(1, 3);
		graph8.addEdge(2, 3);
		graph8.addEdge(2, 4);
//		graph8.printGraph();
//		graph8.depthFirstTraverse(0);
//		graph8.depthFirstTraverse();
//		graph8.depthFirstTraverseRecursive(0);
//		graph8.depthFirstTraverseRecursive();
//		graph8.breadthFirstTraverse(0);
//		graph8.breadthFirstTraverse();
//		graph8.topologicalSort();
//		graph8.topologicalSortRecursive();
		DirectedUnweightedGraph graph9=new MapDirectedUnweightedGraph(6);
		graph9.addEdge(0, 1);
		graph9.addEdge(0, 2);
		graph9.addEdge(1, 2);
		graph9.addEdge(1, 3);
		graph9.addEdge(2, 3);
		graph9.addEdge(2, 4);
//		graph9.printGraph();
//		graph9.depthFirstTraverse(0);
//		graph9.depthFirstTraverse();
//		graph9.depthFirstTraverseRecursive(0);
//		graph9.depthFirstTraverseRecursive();
//		graph9.breadthFirstTraverse(0);
//		graph9.breadthFirstTraverse();
//		graph9.topologicalSort();
//		graph9.topologicalSortRecursive();
		DirectedWeightedGraph graph10=new AdjacencyMatrixDirectedWeightedGraph(5);
		graph10.addEdge(0, 1, 2);
		graph10.addEdge(0, 2, 3);
		graph10.addEdge(1, 2, 9);
		graph10.addEdge(1, 3, 1);
		graph10.addEdge(2, 3, 2);
		graph10.addEdge(2, 4, 6);
//		graph10.printGraph();
//		graph10.topologicalSort();
//		graph10.topologicalSortRecursive();
		DirectedWeightedGraph graph11=new AdjacencyListDirectedWeightedGraph(5);
		graph11.addEdge(0, 1, 2);
		graph11.addEdge(0, 2, 3);
		graph11.addEdge(1, 2, 9);
		graph11.addEdge(1, 3, 1);
		graph11.addEdge(2, 3, 2);
		graph11.addEdge(2, 4, 6);
//		graph11.printGraph();
//		graph11.topologicalSort();
//		graph11.topologicalSortRecursive();
		DirectedWeightedGraph graph12=new MapDirectedWeightedGraph(5);
		graph12.addEdge(0, 1, 2);
		graph12.addEdge(0, 2, 3);
		graph12.addEdge(1, 2, 9);
		graph12.addEdge(1, 3, 1);
		graph12.addEdge(2, 3, 2);
		graph12.addEdge(2, 4, 6);
//		graph12.printGraph();
//		graph12.topologicalSort();
//		graph12.topologicalSortRecursive();
	}

}
